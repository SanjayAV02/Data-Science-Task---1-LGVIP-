# -*- coding: utf-8 -*-
"""Iris_Flower_Classification_ML_Project.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ND_1MQcjmrNW0tRwRnkIVjsF8FGeMVmJ

# LetsGrowMore (LGMVIP) - May 2022

Sanjay A V - Data Science Intern

## BEGINNER LEVEL TASK

## Task 1 - Iris Flower Classification ML Project

### 1. IMPORTING THE NECESSARY LIBRARIES
"""

import pandas as pd
import numpy as np
from matplotlib import pyplot as plt
import seaborn as sns

"""### 2. IMPORTING THE DATASET"""

data = pd.read_csv("Iris.csv")

"""### 3. ANALYSIS"""

data.head(10)

data.tail(5)

data.shape

data.columns

data.info()

data.isnull().sum()

data["Species"].unique()

data.describe()

"""### 4. VISUALISATION"""

sns.pairplot(data,hue="Species")

"""INFERENCE:
    
  From the above visualisation we can observe that iris-sertosa is separated from the other two flower species and also that iris-virginica is the longest and iris-sertosa is the shortest flower species
"""

fig,(ax1,ax2)=plt.subplots(ncols=2,figsize=(16,5))
sns.scatterplot(x = 'SepalLengthCm', y = 'PetalLengthCm',data = data,hue='Species',ax=ax1)
sns.scatterplot(x = 'SepalWidthCm', y = 'PetalWidthCm',data = data,hue='Species',ax=ax2)

plt.figure(figsize=(16,4))
plt.subplot(1,4,1)
sns.boxplot(data=data,y='SepalLengthCm',color = 'yellow')
plt.subplot(1,4,2)
sns.boxplot(data=data,y='SepalWidthCm',color='green')
plt.subplot(1,4,3)
sns.boxplot(data=data,y='PetalWidthCm',color='blue')
plt.subplot(1,4,4)
sns.boxplot(data=data,y='PetalWidthCm',color='red')

sns.heatmap(data.corr(), annot=True)
plt.show()

"""#### SEPARATING FEATURES FROM THE TARGET"""

data_sep = data.values

x = data_sep[:,1:5]
y = data_sep[:,5]

"""### 5. BUILDING MACHINE LEARNING MODELS

#### TRAINING THE MODEL
"""

from sklearn.model_selection import train_test_split
from sklearn.metrics import confusion_matrix
from sklearn.metrics import classification_report

X_train, X_test, y_train, y_test = train_test_split(x, y, test_size=0.2)

"""Implementing the below common algorithms in order to check how accurate each algorithm is.

1. Logistic Regression
2. K-Nearest Neighbour (KNN)
3. Support Vector Machine (SVM)
4. Decision Tree

### 1. LOGISTIC REGRESSION
"""

from sklearn.linear_model import LogisticRegression

regressor = LogisticRegression()
regressor.fit(X_train, y_train)

y_pred1 = regressor.predict(X_test)

"""#### SUMMARY"""

print(classification_report(y_test, y_pred1))
print(confusion_matrix(y_test, y_pred1))

"""#### ACCURACY"""

from sklearn.metrics import accuracy_score
print('accuracy is',accuracy_score(y_pred1,y_test))

"""#### TESTING THE MODEL"""

X_Predict = np.array([[3, 2, 1, 0.2], [  4.9, 2.2, 3.8, 1.1 ], [  5.3, 2.5, 4.6, 1.9 ]])
predict_values = regressor.predict(X_Predict)
print("Prediction of Species: {}".format(predict_values))

"""## 2. K-Nearest Neighbour (KNN)"""

from sklearn.neighbors import KNeighborsClassifier

classifier = KNeighborsClassifier(n_neighbors=8)
classifier.fit(X_train, y_train)

y_pred2 = classifier.predict(X_test)

"""#### SUMMARY"""

print(classification_report(y_test, y_pred2))
print(confusion_matrix(y_test, y_pred2))

"""#### ACCURACY"""

from sklearn.metrics import accuracy_score
print('accuracy is',accuracy_score(y_pred2,y_test))

"""#### TESTING THE MODEL"""

X_Predict = np.array([[4,3.5,2.4,1.7], [3.5,2.8,1.9,1], [5.6,4.0,3.2,2]])
predict_values = classifier.predict(X_Predict)
print("Prediction of Species: {}".format(predict_values))

"""## 3. Support Vector Machine (SVM)"""

from sklearn.svm import SVC

svn = SVC()
svn.fit(X_train, y_train)

y_pred3 = svn.predict(X_test)

"""#### SUMMARY"""

print(classification_report(y_test, y_pred3))
print(confusion_matrix(y_test, y_pred3))

"""#### ACCURACY"""

from sklearn.metrics import accuracy_score
print('accuracy is',accuracy_score(y_pred3,y_test))

"""#### TESTING THE MODEL"""

X_Predict = np.array([[3, 2, 1, 0.2], [  4.9, 2.2, 3.8, 1.1 ], [  5.3, 2.5, 4.6, 1.9 ]])
predict_values = svn.predict(X_Predict)
print("Prediction of Species: {}".format(predict_values))

"""## 4. Decision Tree"""

from sklearn.tree import DecisionTreeClassifier

decision = DecisionTreeClassifier()
decision.fit(X_train, y_train)

y_pred4 = decision.predict(X_test)

"""#### SUMMARY"""

print(classification_report(y_test, y_pred4))
print(confusion_matrix(y_test, y_pred4))

"""#### ACCURACY"""

from sklearn.metrics import accuracy_score
print('accuracy is',accuracy_score(y_pred4,y_test))

"""#### TESTING MODEL"""

X_Predict = np.array([[4,3.5,2.4,1.7], [3.5,2.8,1.9,1], [5.6,4.0,3.2,2]])
predict_values = decision.predict(X_Predict)
print("Prediction of Species: {}".format(predict_values))